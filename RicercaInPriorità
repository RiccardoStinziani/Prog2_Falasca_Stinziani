from Collection.priorityQueue.PQbinomialHeap import PQbinomialHeap

from Collection.Graph.list import LinkedList as list
from Collection.Graph.graph import Graph

def priorityVisit(graph):
    verticeMax = graph.getMax()
    priorityQueue = PQbinomialHeap()
    priorityQueue.insert(verticeMax.getId(), verticeMax.getWeight())
    markedNodes = [verticeMax.getId]
    list = []

    while not priorityQueue.isEmpty():
        idNode = priorityQueue.findMax()                #DA FAREEEEEEEEEEEEEEEEEEEEEEEEEE nb farlo per tutte le code con priorit√†
        list.append(idNode)
        priorityQueue.deleteMax()                       #DA FARE
        adjacentNodes = graph.getAdj()
        for nodeIndex in adjacentNodes:
            if nodeIndex not in markedNodes:
                node = graph.getNode(nodeIndex)
                priorityQueue.insert(node.getId(), node.getWeight())
                markedNodes.append(nodeIndex)
    return list

def graphGenerator(numberOfNodes):
    pass